import "/nmigen/*"
_contextmanager = import "/contextlib/contextmanager" pure
_signature      = import '/inspect/signature' pure
_skip_frame     = import "tracer/skip_frame" pure

#: TODO

_SYNTAX_ERROR = src_loc_offset *:text sep:" " ->
    # TODO: use 'src_loc_offset' to remove the shim from the stack trace
    raise SyntaxError $ sep.join text



#: TODO

# shadow the Module function with our own: a context manager

_CURRENT_MODULE = None # global variable with the currently active Module being elaborated
module_elaboration_context = _contextmanager$ module -> # how we set _CURRENT_MODULE
    current_module = _CURRENT_MODULE  # store
    _CURRENT_MODULE := module         # push
    yield module                      # yield a reference of the new module to the caller
    _CURRENT_MODULE := current_module # pop

_get_module = bind getter Module where # bind a reference to the original nmigen Module
    getter = Module debug_name -> _CURRENT_MODULE where
        not $ _CURRENT_MODULE :: Module =>
            _SYNTAX_ERROR 1 (repr debug_name) "construction used outside of a module_elaboration_context"
Module = (-> context_maker!) where
    context_maker = module_elaboration_context <- Module # bind a reference to the original nmigen module


#: constants

#(TODO: remove?)
HIGH = 1
LOW  = 0


#: 'a :== b' instead of 'a.eq b' or a |>.eq b

Drive = signal value -> signal.eq value where # TODO: remove
    (import "/warnings" pure).warn "'Drive' is deprecated, use infix :== instead"

:==   = signal value -> signal.eq value


#: Registering domains
#:
#: Example:
#:
#:     Sync$ @a :== HIGH
#:     Comb$ @b :== LOW
#:     Domain.mydomain$ @c :== 5
#:     Mydomain = Domain.mydomain
#:     Mydomain$ @d :== 6
#:     Domain.mydomain = ClockDomain "mydomain"
#:     Domain.mydomain$ $e :== 7

Domains = Obj! where Obj = subclass object where
    __getattr__ = domain_name ~>
        *:statements -> # accepts any amount of statments
            m = _get_module $ 'Domains.' + domain_name
            domain = m.d `getattr` domain_name
            domain += list statements
    __setattr__ = domain_name domain ~> None where
        m = _get_module $ 'Domains.' + domain_name
        setattr m.domains domain_name domain
Sync = Domains.sync
Comb = Domains.comb


#: TODO

Submodule = Obj! where Obj = subclass object where
    __call__ = submodule ~> submodule where
        (_get_module 'Submodule').submodules += submodule
    __getattr__ = name ~> submodule -> submodule where
        setattr (_get_module 'Submodule').submodules name submodule



#: if, elif, else -> When + otherwise
#:
#: Example:
#:
#: When @x $ ->
#:     print "eyo"
#:
#: When
#:     @a ,->
#:         print "foo"
#:     @b ,->
#:         print "bar"
#:     otherwise ,->
#:         print "baz"

When = *:pairs -> None where with _skip_frame! =>
    m = _get_module "When"
    if not $ any $ map (::tuple) pairs =>
        if len pairs == 2 and (pairs!!1)::(type (->1)) =>
            condition, body = pairs
            with m.If condition =>
                with _skip_frame! => body!
            return None

    is_first = True
    did_else = False
    for (condition, body) in pairs =>
        is_else = condition is otherwise
        if
            did_else =>
                _SYNTAX_ERROR 1 "'otherwise' was not last in 'When' block"

            is_first and not is_else =>
                with m.If condition =>
                    with _skip_frame! => body!

            not is_first and not is_else =>
                with m.Elif condition =>
                    with _skip_frame! => body!

            is_else =>
                with m.Else! =>
                    with _skip_frame! => body!
                did_else = True
        is_first = False



#: Switch
#:
#: Example:
#:
#: Switch $input
#:     1 ,->
#:         print "foo"
#:     2 ,->
#:         print "bar"
#:     otherwise ,->
#:         print "baz"

Switch = value *:cases -> with _skip_frame! =>
    m = _get_module "Switch"
    with m.Switch value =>
        for (match, body) in cases => if
            match is otherwise =>
                with m.Case! =>
                    body!
            otherwise =>
                with m.Case match =>
                    body!



#: Construct a nMigen FSM
#:
#: Raises:
#:     SyntaxError: You dun goof'd
#:
#: :param states: List of functions, where the name of the first positional argument if the name of the state
#:
#: Example:
#:
#:     FSM
#:         state1 ->
#:             print "bar1"
#:             state1 |>. state2
#:         state2 ->
#:             print "bar2"
#:             state2 |>. state3
#:         state3 ->
#:             print "bar3"
#:             state3 |>. state1

FSM = *:states -> fsm where with _skip_frame! =>
    m = _get_module "FSM"

    AttrNext = subclass object where
        __getattribute__ = key ~>
            m.next = key

    Next = subclass object where
        __init__ = name ~> None where
            @name = name

        __str__  = self -> @name
        __repr__ = self -> repr @name

        __getattribute__ = next_state_name ~>
            m.next = next_state_name


    names = list f! where f = -> for state_body in states =>
        yield head $ (_signature state_body).parameters.keys!

    with fsm = m.FSM! =>
        for (name, state_body) in zip names states =>
            with m.State name =>
                with _skip_frame! => state_body (Next name)


#: todo

Record = record where
    func_to_pair = func -> (name, func None) where
        name = head $ (_signature func).parameters.keys!

    # bind the original nmigen Record
    _Record = Record

    record = *:funcs **:kwargs ->
        with _skip_frame! =>
            _Record (map func_to_pair funcs) **:kwargs
